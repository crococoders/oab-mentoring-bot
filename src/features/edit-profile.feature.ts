import { Scene } from "grammy-scenes";
import { BotContext } from "@bot/types";
import { saveUser } from "@bot/services/users.service";
import { logger } from "@bot/logger";

export const feature = new Scene<BotContext>("edit_profile");

const logContext = {
  caller: "edit_profile.feature",
};

feature.use(async (ctx) => {
  logger.info({
    msg: "entering scene",
    ...logContext,
  });

  if (ctx.session.user !== null && ctx.session.user !== undefined) {
    console.log("hello", ctx.session.user);
    ctx.scene.call("fill_profile", ctx.session.user!.type);
  } else {
    await ctx.reply(
      ctx.t(
        "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –º–µ–Ω—Ç–æ—Ä –∏–ª–∏ –º–µ–Ω—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥ /register_as_mentor –∏–ª–∏ /find_mentors"
      )
    );
    ctx.scene.exit();
  }
});

feature.do(async (ctx) => {
  logger.info({
    msg: "received argument",
    arg: ctx.scene.arg,
    ...logContext,
  });
  try {
    const user = ctx.scene.arg;
    await saveUser(user);
    // –ù–µ –∑–∞–±—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —é–∑–µ—Ä–∞ –≤ –∫—ç—à–µ
    ctx.session.user = user;
    await ctx.reply(`üë§ ${user.name}\n–û–ø—ã—Ç: ${user.yearsOfExperience} –≥–æ–¥–∞`);
    // @TODO: –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
    await ctx.reply("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!");
  } catch (e) {
    // eslint-disable-next-line no-console
    console.error(e);
    await ctx.reply(ctx.t("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!"));
    ctx.scene.exit();
  }
});
